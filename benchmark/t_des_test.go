package main

import (
	"crypto/des"
	"encoding/base64"
	"fmt"
	"io"
	"os"
	"testing"
)


func TestDecrypt(t *testing.T) {
	var data = "SXkzWWcxZ1FHMkMzRm41cURvNmI3MHk0R2xGazhHUFlqcFk4OUdrNHY4QzdTY0lVbXJ6S2FLZm9UaXF1T1NrRTZtY3EwNXJNVmFyRFFaUVQ0SWZ1Y3d5NGtLNnpFNmovRjdhMWZ2UkE5SWpra1pLaGErbStFMGR5Z3pVTWR3UlVMNU1KUTVLOW1KK1g3S2ZGR05pcEJacnZnZGhsNWx2YkRMaVFyck1UcVA5ZEZoVy9NU0FnWW16SGY3MUo1NWJ6Wlc4WC9FWkI3MTJ6RGV1RnlFbFVSVzhmT3d6VFBOZHd6YWJTSUxnWG9SV0plTE8wK2RpV3VRdzV4aDMxamZMSXRUQ0p1ZGdHNGlrZjQvTFlCTXUySnlqL09wU2x0L21sZ1c2S2xHb2JIYURTN2U1c0Z0TytRcGduTFlSSjQ3cEZLWU8zOHZPL3dZbHNQeGQ1MzB0dWdPWGtxMnlHY1h3S1VHN3d6S3I0YnRGajRPWjdja1psUlJES0puWjNFT0E1ZVdYYlhJQjNSaGZmWTVFRUQ1M2NTN29BblZVZzJ1TkNXS3Z4R1ZPbklHTk1uVTNZcFhUbThWNk9EYlFzOU81eEQwenpxejhHZXJkMStjY0t3OXB1NE5uZmlTRDJqOVBVMmFwUVRYOTRYU2RNWU1HRGFNcW8xbDNlcGZUZFF0M3JvWkRMOGp1UXIxeUhHajhQZmFxbDhXbmNBL1MvbGo4d3cwR1VFK0NIN25NTXVKQ3VzeE9vLy9tTHJqY0tTQW1OVTVvcGRRNGY4VDJJd1M5S3ZRdmIwaG1aZWdNYzErTHVYcGI2OVQrcWcyVHg0dVFLdW0xLzc1M1htSm9abTRRVWtOY0JLUkhDNE4vMWtpU2EyRngyMERHRkRSMm9XOGo1aEhkRmt6cXYwUHRFbmtyN1dnYXJqTDBjUUpzUndBTnJPZVJBUmEzNGt6SWVSNUlNUm56bWZjWTNDeG1RbElleHFWZXZjRU53a1JFM0xmV1JBWVZpb2JYeTB6RS91RnZnZDNyeUltbHhnLzRlcFhDQVIyMW5vS0IwUERVcEpmbS9raFB3cklxUlArckk5MDhoMHRDY3RZb2l0eXlRV0RxNTZJYmRLZ2tNaWpiVUZtblN5Z1ZkY3g3SExSc1lzNTBONDM4QXZQd3pYVVhXMEVjcjhhZ2sxZFI5dEE0dFpHKzdaWGZ0dDdCZ2xoa2VWN0N3TXo5OXhUMEMrb3RGMjlOYXFuMHlIc0NiQWtXRnBCWHN3UWY0QnlWL3hUWTJpbWNmSnhUVHNTYVk1VkIwa3NVT1dXcjZVREZzNFM0YjQxVWNyRjFoeWFuYVRIdnpCNGMwK00zU1h0KzdpcjA5M2d6aHYxWEJVcGg0M1BSWHdxRENEeDh0TEdqVFp2ZTZmdVdseFI4SEJ2dk93WWVNOTlYelB6SlhKZlFwUzJZN2Z6V0JHUk5pRXlsVGxObVM5MVYxeW96ajN3Q1RwZWNoRHAzQ3VpTkZsSHBhL2dvWkUySVRLVk9VMlpMM1ZYWEtqT1BmeWx4b1VxTThxQ0FJNFpWN2hVQVpwWFRCSzF0YlJORk8vcDJocWpOZ2E2azJVOWRIVmdBbWw5Y2hXV0U5aFkwd2NYblBTZHhaSnZvaURzNytJVTVjUnNGVG9yM2N3bkRYVHVBd3RRUzBtNzRiR0FGamcwZGQzMWI5K2l6eXNjc0dJZzdPL2lGT1hFWWU4Rk9TRzRNQzVrN2dNTFVFdEp1K1c4STA4SHBlS3RuSndVcXI0Vmh6Q2RqVGJ4amlvZzU0TXZXcHpFdDZtNmdOd0NjczVZSG9Qa1pEWDhOWC9FeEl1MnYvNDZ1T1hkSjhTVTVRL1o1NUl3djlpNFg0NVNaT201Q1dWUDY5VDIxUHcydmd4eFUxYjBXNzZ1UFVUNHBNaWxadVRPS2wrU0pjVVVVM2pIRDVMZEplRElXS2gzZ2lJTk43SkZkZkpkUytVQ1NabzVhWUt3R0VJUVRYUFVZZHdqdkRmVkRETWo2V0svaTR2OWVtaWVsYlBWdFpFYU5XVGorc3Z4R1Q3MFNxTFA1c3BENk92RTV6NEVTN2RFbmxDZjJGNDVYMStLSHgvL3ZreE1IYUVzZ2hCRE5xc2lPOG4xQmtRVGhQd3RlZEZuTUFOUU91R25JR3p0dG14S2VJVWFjZGd0bkVSYmt3LzlFY25uSzhEaHM1QXBZUE0zdklXTnpYQUlIeTRJeHlCczdiWnNTbmlQVm1TVUxpV2oxQ1hTZ1Znc1FOUi92eGhDSnBLRkkwU2R6c1NkMFZ1N0xWTXMvd2JIbmc1TG12KzBraDk0TExBczI3N0JtYU9lanc4UHF4dDlSeW5oNjJrMVo4d2htWWg2Nld2KzBVdE1zRXlDRUVNMnF5STd3UFk2RE1uRGg1ZHljSEZzYWIxeWhSWDJBaXlSd29GMVVBY0tEYklvRjJOaHFJdkFJWjZTSjU3Mm9oUnc2akZrTW0vWHVhMnpXZ2hTL2xOR1NLbiszVVlxZU8zZzRLK2hHQWZFT0VKYVVicHc0RWgwM3laSHpsTkdCSklIR3grNEpkS0JXQ3hBMUgreVM3N3VBS1JhckVwUTZ2akVlSTVyaG9LcUNDL0c3alZFd1pDUjl0Q0JRdDR4cnpkYitTdFlmSk1oZG9aZ3BFRE9kQlgzRW1xS3Ayc1NzOGdDSzdvZTUxbVlYQUl2SkNHTXc1SjNGN3BFRnV2RWNFRjRPK3JUbGR0VlBsTnIvSnpyWUIwc25iZmlvNC9IcXBLZXVKRnRJUDFlRk1qejdCb0VxWW9HSU9kZlVYYS9KcDB1Njc5ckE4R09YMzNkK3hUVWR5Z3pVTWR3UlV6cUVmbk93RFFrdGRIOEpESmJDaUVNN0owbHBhZ3hFckZ5NlZEZFZmSXZ5Umt3aUJoVUxRa2ZseE5BbHpKTUxpRSs3QS9EYTZweHo5R200Wjd6TDJGMUZCNVk3TDd1emxLUnBCeXJsa2Q5Q1ZJbE13WWNoSHNlNlh1QlhHa080eXBDM2RJS05uR2dEeU9BVC95U1lSNUdlc0Rudk1YaDd5K1RxbVpVM2lQQ2hpUVpYcG8wUXRWdW1UYzkraVR6R3NmVW5ZZ3hQYmt6RVg2NHRLU2VzWXEwMWphdTN3aVZJc1pTT0JEK1A2d2pIZnRiekYzakIxYlArQkVYQlRBZmUxNFBLQy9YZEJXa2R3ZlkweSt6TzUwTFJNSDYzSFNzYmFBR0VkZVlrZDMxaFJRZVdPeSs3czVXQmdMcWhiN1RIZVhOeHk1SnBmTFFTQ1VDa2tnNlp1YU13OUszQ1NpNlVoUnFxK1I5OWVYSE8zVHVWWXJzQWJESG5xQUtjdWhXOVoxN3Iwci94aUhnTWRnSHlUSWkxdjg3L0Y0NHRyeGhNUnQ0OVJvU0ZUTTFrSUUwd3BKY3NSSUN6aHRFdy9EMDVxWngvNkE3NVVlMk5yVXBrbzZtTmtxR3RWVUFXQzRsc2xtUlpIT3dBeGhBajlRaTdLeStwS2l1UDdKUXZ3TjdHM0lrTSs0YnF1MC9KajZrUjBJcnhpdXBEY3JCZDZDenM4YTY3MXVIVVlNZkprblBQTGdPQlpjUFdTSkpyWVhIYlFNWVVOSGFoYnlQbUVkMFdUT3EvUSswU2VTdnRhQnF1TXZSeEFteEhBQTJ0MDh2MzBmUUpGSjdXUzlLS3NKc1RJVlVNQXdncFpDeWh5QnM3YlpzU25pRFZXVEZlSkVUQ202SURWbWF1NUNpUHZpMk9QblFOR3ZwTVJWNmZzQld5MUd0VGE5VDh4dnV5TitOK095SnZSbFR1OTNzOTAzSi9tbmtSZmRqY3RPbWhPNUFPYVNvVStLdFlwWjRVRXFtVzNEblBVN2RwTHJaMjFIbmxyblZsMEc5VlJlR1ZOdUdzQXlwVm1hUlgvYUlQVGlBQVJCK2tXMkp6RmVpKzBwVlVjeE5DZFpIeUcvM0U5a3lnN043TTJVcVZqcGFLRjNRdW1uQ0JxZVI3eGxCVHZJdzI2Y3cvRmFXRGtZNGw3RnRoSkZOUUJxSngyVEVTd3dvZ3YzVFF2L1pwcEorUnhVZEZEUktKakttenFhN3RHcXI1SDMxNWNjL2FVaVNvRHlsUnZIeHlpZ2ZoSUZESm4rcDM1M0JFcGNEOVZya0o1U08vRU5seGtsU2dBTXlGdkt3TGp0M0FLODZFRnlHd2lSMWRZSFBZN05VdUZ3RnZoRnM4UjVqVTN2SWNGUHlPWnFwQ2FkL2REcERyeDIybEZMMThNNkROWU8yelZibjdTTWM0MGs4a2hNTGs1b3FYRFI5WWh5UDJpUU10WkpGTEkrb2NRWitPcHByOGdoTFZoQ1p1MXNmcXA4ZlMrYUo0akkxQ3R0ZkdlRGU4dHdJWFJjbG52UzA3WGo0bjBFQzIxclB2ejlheEpqNFZtTm94eHcrbGxPL1Zmay9PVjRiSkVUWWRpNVZBSnhQVmpSZG9qRDRkQUFzb3FjRjdpdWxXVGROcy9nT2I3QVZJUy9iLzVvQmt4YXl3UjBaVytDbGVXL0tKQVN1Ty8yeG1RVjQ5UHhHUmdDNnpzeXZ1MklNZFpzc2R0dmZIdmlJV2lKVUE5bU0zSFhBbkdwQTVzKzNmWStFT1dQenlCTjJOMHNyS0ZIYThjVXljTEEzUXVjUmprOTIySDA2c0dPR1VIWnNQbWVESTNaaXZHK3p0RFJuVTFOei80QVhnNkdOMm0vaHp2TnE0WGFIZ2k4UjJnTkJUUlFCN0VLTFQ5QXNUTy9ZUm02anlwelZQUE0wUkUrWS9FQlhFb0d4d2tGeUtDdythaW92KzRNcDg4eVdHdm04dDBTZ01kbExCQldFZERTVnM1VUxnTDU0b09hK1BzU0FZMk5PTHZ3Zm5IREFuYkcwVmxSQi9EdWxyWGdrbloxZU9TUXhaeENRVVIzYmswZUNqRWxUdUw0eVNqN0dSdUNvbkZ3cTJWZFpCOFZkSHV0Q0pTTCtQVGJoSkhCNW1aVUg4TnhMTk5oWjNvUmdHdUtGcXBkeU9HNUtUWlR4VUJMczRVdUk3NUk5UEhDVlRTOHBoaDVyNi8wZUsyK0ZDR0sxUWhEZjJDSFBLVU9WMzBKSFFpRHM3K0lVNWNSaDNtMFd5OUMzL1dUdUF3dFFTMG03NnQzSGZrUXNINkZDRUJVWFNMWWhVb0lnN08vaUZPWEViek1WNzB2TVdjMkU3Z01MVUV0SnUrZ1R4UWd5QVgvM1ZhSUk3TnR2MzVKNjhGaUR3QStreWNTd2ZyczI1RWFKbENIbi9BaGZTQlBGN3BNTCtqSXhua3k5ZHVQaVlVTDVoMkRGQjI3Q3JocGtlb1NQYWVqQ09QYS9KcDB1Njc5ckE4R09YMzNkK3hUVWR5Z3pVTWR3UlV6cUVmbk93RFFrdGRIOEpESmJDaUVNN0owbHBhZ3hFckZ5NlZEZFZmSXZ5Umt3aUJoVUxRa2ZseE5BbHpKTUxpRSs3QS9EYTZweHo5R200Wjd6TDJGMUZCNVk3TDd1emxLUnBCeXJsa2Q5Q1ZJbE13WWNoSHNlNlh1QlhHa080eXBDM2RJS05uR2dEeU9BVC95U1lSNUdlc0Rudk1YaDd5K1RxbVpVM2lQQ2hpUVpYcG8wUXRWdW1UYzkraVR6R3NmVW5ZZ3hQYmt6RVg2NHRLU2VzWXEwMWphdTN3aVZJc1pTT0JEK1A2d2pIZnRiekYzakIxYlArQkVYQlRBZmUxNFBLQy9YZEJXa2R3ZlkweSt6TzUwTFJNSDYzSFNzYmFBR0VkZVlrZDMxaFJRZVdPeSs3czVXQmdMcWhiN1RIZVhOeHk1SnBmTFFTQ1VDa2tnNlp1YU13OUszQ1NpNlVoUnFxK1I5OWVYSE8zVHVWWXJzQWJESG5xQUtjdWhXOVoxN3Iwci94aUhnTWRnSHlUSWkxdjg3L0Y0NHRyeGhNUnQ0OVJvU0ZUTTFrSUUwd3BKY3NSSUN6aHRFdy9EMDVxWngvNkE3NVVlMk5yVXBrbzZtTmtxR3RWVUFXQzRsc2xtUlpIT3dBeGhBajlRaTdLeStwS2l1UDdKUXZ3TjdHM0lrTSs0YnF1MC9KajZrUjBJcnhpdXBEY3JCZDZDenM4YTY3MXVIVVlNZkprblBQTGdPQlpjUFdTSkpyWVhIYlFNWVVOSGFoYnlQbUVkMFdUT3EvUSswU2VTdnRhQnF1TXZSeEFteEhBQTJ0MDh2MzBmUUpGSjdXUzlLS3NKc1RJVlVNQXdncFpDeWh5QnM3YlpzU25pRFZXVEZlSkVUQ202SURWbWF1NUNpUHZpMk9QblFOR3ZwTVJWNmZzQld5MUd0VGE5VDh4dnV5TitOK095SnZSbFR1OTNzOTAzSi9tbmtSZmRqY3RPbWhPNUFPYVNvVStLdFlwWjRVRXFtVzNEblBVN2RwTHJaMjFIbmxyblZsMEc5VlJlR1ZOdUdzQXlwVm1hUlgvYUlQVGlBQVJCK2tXMkp6RmVpKzBwVlVjeE5DZFpIeUcvM0U5a3lnN043TTJVcVZqcGFLRjNRdW1uQ0JxZVI3eGxCVHZJdzI2Y3cvRmFXRGtZNGw3RnRoSkZOUUJxSngyVEVTd3dvZ3YzVFF2L1pwcEorUnhVZEZEUktKakttenFhN3RHcXI1SDMxNWNjL2FVaVNvRHlsUnZIeHlpZ2ZoSUZESm4rcDM1M0JFcGNDUHluTHJnVTk1QnVpTkZsSHBhL2dwWWQzRHZwcnhOQmhOSVFLNVd2L2ZsRTBvNnR4SmFWWkt0V2dVenJhYld2TVV1M1J6RFF1OW9jY2tCM3pQeS9rV1pib1NCeHFCdGNoSk54dDBMRTM3NVNrOHhZSnFGQWVyMCtoS2ZMTWJkWnFUSjIrSXNTUlFTZ1greGJzbHVrYTZLRmJEeUtyeTZEdVZ0b2JtU3RKeHBscEtYd0wyb1ZDQTR1WnVJUitKS1VJWTFmUTJGc2xRbXNldE9xWmRmU0ExNWxZdFA1S2ZVcVFET2NNc2tFRlJEVGJkSHkya2NwOFNUSW5SMEk0c3dOT0cwZVZCUXl5RjJ2NGlnL1VXb1NvbVM2cUJzakt3bFY4QVhGTWZDYklIaytnUWpvK3ZFN25tRjNQQkFEbDVZVWovN2hNaDg3RjdIalpSZVZvRWVtaTJvWGFEcTJBY0dwbC9mSTlRYnlXVHNlMktDNUdWZitxUGJSenNmRytFN1VYQk1sZWtMNHJmSlBnTFRrU0tKRk0yemdUWVhGeEtWcm9yQXkrT252ZnBkZU1xS3JrMmRnTU09"
	data1, _ := base64.StdEncoding.DecodeString(data)
	origin := Decrypt(data1, []byte(desKey[:des.BlockSize]))
	originStr := string(origin)
	fmt.Println("originstr:", originStr)
	Write(&originStr)
	//加密
	secret := Encrypt([]byte(origin), []byte(desKey[:des.BlockSize]))
	Write(secret)

}
func TestEncrypt(t *testing.T) {
	//解密 secret->decode->decode->des.decrypt->origin
	//加密 origin->des.encrypt->encode->encode->secret
	origin := `{"head":{"firm_code":"","sub_signature_no":"AQY20220719163013499i68X","app_type":"APP_TYPE:H5","emp_num":"","biz_code":"payNotice","subjectStyle":"","main_part_code":"B202103190022","application_id":"YY20220719163549998OBoR","userCode":"HZZ1658213564629","partner_id":"HZZ1658213564629","amountStyle":"","remark9":"","front_env":"","remark8":"","remark5":"","remark10":"","remark4":"","remark7":"","remark6":"","remark1":"4","main_signature_no":"MQY20220719162852682jVG5","remark3":"","remark2":""},"body":{"msg":"TRADE_SUCCESS","code":"0000","data":{"pay_status":"ODR_PAY_STATUS:2","pay_chanel":"alipay","pay_serial_number":"2022080322001400171418376855","order_group_id":"a9dccf96719844ba9aac73bd230","pay_amount":"0.01","pay_card_no":"2088612964400174","order_id":"a9dccf96719844ba9aac73bd230","pay_time":"20220803114836"}}}`
	secret := Encrypt([]byte(origin), []byte(desKey[:des.BlockSize]))	
	Write(secret)
}
func Encrypt(data, key []byte) *string{
	block, err := des.NewCipher(key)
	if err != nil {
		fmt.Printf("err:%+v\n", err)
	}
	bs := block.BlockSize()
	length := len(data)
	out := make([]byte, length)
	fmt.Println("len+:", length + (8 - length % 8 ))
	if length % 8 > 0 {

		out = make([]byte, length + (8 - length % 8 ))	
		add := 8 - length % 8 
		for add > 0 {
			data = append(data, 0)
			add--
		}
	}
    dst := out
	// mark := false
    for len(data) > 0 {

		block.Encrypt(dst, data[:bs])
        data = data[bs:]
        dst = dst[bs:]

    }
	
	baseOne := base64.StdEncoding.EncodeToString(out)
	baseTwo := base64.StdEncoding.EncodeToString([]byte(baseOne))

	return &baseTwo
}

func Decrypt(str, key []byte) []byte{
	src, err := base64.StdEncoding.DecodeString(string(str))
	if err != nil {
		fmt.Printf("err:%+v\n", err)
	}
	fmt.Println("src:", src)
	block, err := des.NewCipher(key)
	if err != nil {
		fmt.Printf("err:%+v\n", err)
	}
	bs := block.BlockSize()

	out := make([]byte, len(src))
    dst := out
    if len(src) % bs != 0 {
        fmt.Println("err------->")
    }
    for len(src) > 0 {
        block.Decrypt(dst, src[:bs])
        src = src[bs:]
        dst = dst[bs:]
    }
	return out
}

func Write(text *string){


		var filename = "./log.txt"
		var f *os.File

		f, _ = os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm) //打开文件
		fmt.Println("文件存在")

		defer f.Close()
		n, err1 := io.WriteString(f, *text) 
		if err1 != nil {
		   panic(err1)
		}
		fmt.Printf("写入 %d 个字节n", n)

			// f, err := ioutil.ReadFile("dk.ttf")
    // if err != nil {
    //     fmt.Println("read fail:", err)
    // }
	// fileName := "log.txt"

    // err = ioutil.WriteFile(fileName, f, 0666)
    // if err != nil {
    //     fmt.Println("write fail")
    // }
    // fmt.Println("write success")
}